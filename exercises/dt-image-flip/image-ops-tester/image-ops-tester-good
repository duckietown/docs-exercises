#!/usr/bin/env python

from image_ops_tester_generic import image_ops_tester_generic

image_ops_tester_generic()

# #!/usr/bin/env python
# 
# from image_ops_generic import *
# from duckietown_utils.system_cmd_imp import system_cmd_result
# from duckietown_utils import col_logging
# from contracts import indent
#  
#      
# def image_ops_tester():
#     
#     args = sys.argv[1:]
#     
#     if len(args) != 1:
#         panic(1, 'Exactly one parameter required.')
#         
#     script = args[0]
#     
#     script = os.path.realpath(script)
#     
#     expect(99, script, [], desc='Empty arguments should return 99.',
#            our_exit=11)
#     
#     good_images = ['sunset.jpg']
#     where = '/tmp/where'
#     for good_image in good_images:
#         expect(0, script, [good_image, where], our_exit=11)
# 
#     not_existing = 'not-existing.jpg'
#     
#     expect(2, script, [not_existing, where], our_exit=11)
#     
#     invalid_empty = where + '/empty.jpg'
#     with open(invalid_empty, 'w') as f:
#         f.write('')
#         
#     invalid_garbage = where + '/garbage.jpg'
#     with open(invalid_garbage, 'w') as f:
#         f.write('garbage')
# 
#     invalid_truncated = where + '/truncated.jpg'
#     data = open(good_images[0]).read()
#     data = data[:-200] 
#     with open(invalid_truncated, 'w') as f:
#         f.write(data)
#         
#     invalid = [invalid_empty, invalid_garbage, invalid_truncated]
#     for i in invalid:
#         assert os.path.exists(i)
#         expect(3, script, [i, where], our_exit=11)
#         
#     logger.info('image-ops-tester thinks %r is image-ops conformant ' % script)
#     
# if __name__ == '__main__':
#     image_ops_tester()
#     
#     
